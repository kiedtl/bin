#!/bin/sh
#
# http://github.com/mitchweaver
#
# yet another fetch script
#

# shellcheck disable=2030,2034
space() {
    df -h | \
    while read -r drive size used _ perc mountpoint _ ; do
        # only print line if drive is a physical device
        case ${drive##*/} in
            sd*|nvme*)
                case $mountpoint in
                    */boot|*/efi)
                        # ignore
                        ;;
                    *)
                        printf "│ ^%s/%s^│\n" "$used" "$size" #"$perc"
                esac
        esac
    done
}

# idea to get terminal font
# get_font() {
#     font=$(strings <$(which st) | grep 'pixelsize=')
#     printf '%s\n' "${font%%:*}"
# }

# Get memory information by parsing /proc/meminfo.
# Idea from pfetch, (dylan)
#
# Formula: MemUsed = MemTotal + Shmem - MemFree - Buffers - Cached - SReclaimable
# Source: https://github.com/KittyKatt/screenFetch/issues/386
#
# Only works on Linux.
#
# shellcheck disable=2031
mem() {
    # Parse the '/proc/meminfo' file splitting on ':' and 'k'.
    # The format of the file is 'key:   000kB' and an additional
    # split is used on 'k' to filter out 'kB'.
    while IFS=':k ' read -r key val _ ; do
        case $key in
            MemTotal|Shmem)
                total=$((total + val))
                used=$((used + val))
                ;;
            MemFree|Buffers|Cached|SReclaimable)
                used=$((used - val))
        esac
    done </proc/meminfo

    printf '%s/%s\n' \
        "$(printf '%s\n' "$((used * 1024))"  | human)" \
        "$(printf '%s\n' "$((total * 1024))" | human)"
}

temp() {
    read -r t </sys/class/thermal/thermal_zone0/temp
    printf '%sC\n' "${t%???}"
}

model() {
    if [ -f /sys/firmware/devicetree/base/model ] ; then
        read -r m < /sys/firmware/devicetree/base/model
    elif [ -f /sys/devices/virtual/dmi/id/product_name ] ; then
        read -r m </sys/devices/virtual/dmi/id/product_name
    fi
    printf '%s\n' "$m"
}

os() {
      if command -v crux       >/dev/null ; then os=CRUX
    elif command -v xbps-query >/dev/null ; then os=Void
    elif command -v apt-get    >/dev/null ; then os=Debian ; fi
    printf '%s %s\n' "$os" "$(uname -r)"
}

pr_line() {
    buf=$1
    # SC: "i is unused"
    # shellcheck disable=2034
    for i in r i c i n g $(seq "$3") ; do
        buf="$buf─"
    done
    printf '%s\n' "$buf$2"
}

pr_host() {
    read -r h </etc/hostname
    host="$USER@$h"
    printf '│   %s' "$host"

    # fix this mess later, for now it works
    #
    # SC: "i is unused"
    # shellcheck disable=2034
    for i in _ _ $(seq $(($1 - ${#host}))) ; do
        printf ' '
    done

    printf '%s\n' '│'
}

# │ ^$(machine)^│

# get longest line
length=$(os)
l2=$(model)
[ ${#length} -lt ${#l2} ] && length=$l2

# print top borders
pr_line ┌ ┐ ${#length}
pr_host     ${#length}
pr_line ├ ┤ ${#length}

column -t -s ^ <<EOF
│ ^$(model)^│
│ ^$(os)^│
│ ^$(temp)^│
│ ^$(mem)^│
$(space)
EOF

# print bottom borders
pr_line └ ┘ ${#length}
